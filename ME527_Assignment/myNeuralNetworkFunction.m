function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 23-Mar-2018 14:41:23.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.0235184806526772;3.68090911129635;85.8228633969934;82.9141467817229;370.06623617799;448.558553598937];
x1_step1.gain = [0.200577406157911;0.317084479383847;0.141622529474122;0.00270414044174793;0.0222448947261451;0.000298707514015019];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.063548626851286288;0.099678258145151244;-0.32688132576563905;-0.32491418072259814;-0.27529147514577801;0.45756419681193278;0.51630146917986453;0.49069735218448873;0.94317266193623273;-0.044481217694422509];
IW1_1 = [0.32312382142718299 -0.09348296272355433 0.0012785583772120747 0.05240876020205338 -0.033712273813108873 0.038517393838344495;-0.043477798402988183 -0.024360582683934043 -0.19908036879716065 -0.047700604471498008 0.0082260225759872799 0.15658517646944156;-0.379904601277267 -0.16607217943501906 -0.13282376794048487 -0.044267013397172088 0.020320834245881676 1.0591931379343287;0.12340116107358981 0.086486887277740024 0.097487760915901542 -0.14858084617306788 -0.12094452176802482 -0.072294609194289844;0.1736995116432852 0.64524499922413248 0.028562591128112109 0.017537644316566632 -0.030931150659580436 -0.11858646717066819;0.14831549767961016 0.047325642481325474 -0.16375315018656394 -0.065912592630188935 -0.044628430498736819 -0.014809866727677765;-0.089282089001402234 0.61214285034432325 -0.034850269286750724 -0.0046020126673442206 0.022957535756118187 -0.060615030560697281;0.062838883461015793 -0.0059451062922675924 0.048054999577868199 -0.88457553331498262 0.081819456613583613 0.14514025135553218;0.0064836794369761506 -0.03385343610369905 0.11674915126197162 0.71170728131920535 0.10607951270851756 0.12581526627769923;0.10164770718227333 -0.10079424041975267 0.079883400127359033 0.020366498594473204 -0.099671379343781744 -0.10959961373068509];

% Layer 2
b2 = [-1.0260069322150332e-05;0.54849813922024337];
LW2_1 = [-4.2721272195721783e-06 2.4717131680968899e-06 1.2256549674660481e-05 3.3723535399323129e-06 5.5778061496288173e-06 -4.4426783615180551e-06 1.8430823836031452e-06 4.1136203438921829e-06 -9.1760612197572383e-06 -2.9778981927179715e-06;-0.53331802809578732 0.46158313183124333 -0.58764770264032384 -0.51227231415183627 0.55357726223335868 0.53947457494815665 -1.0863785861503943 -0.66262323790492139 -0.52077218556132621 -0.37139282492218734];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [300.791259469038;1.11196961593871e-05];
y1_step1.xoffset = [0.189272976848898;130079.138497968];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
